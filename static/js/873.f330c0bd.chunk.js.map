{"version":3,"file":"static/js/873.f330c0bd.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCKnKA,EAAoC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAC/CC,EAAO,YAAcF,EACzB,OACI,iBAAKG,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,WACI,gBACIC,IAAI,sGACJC,IAAI,SACR,SAAC,KAAD,CAASC,GAAIL,EAAb,SAAoBD,QCTnBO,EAAU,SAACC,GACpB,OAAO,gBAAKN,UAAWC,EAAAA,OAAhB,SACFK,EAAMC,W,uCCYTC,GAAcC,EAAAA,EAAAA,GAAiB,IAqC/BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAfE,SAACL,GAC3B,OACI,kBAAMO,SAAUP,EAAMQ,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXnB,KAAM,iBACNoB,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAeZ,QAGrC,kD,6BCdZ,GAAea,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACC,GACtB,MAAO,CACHC,cAAe,SAACC,GACZF,GAASG,EAAAA,EAAAA,GAAgBD,SAOjCE,EAAAA,EAFJ,EDhBmD,SAAC,GAAkC,IAAjCL,EAAgC,EAAhCA,YAAaE,EAAmB,EAAnBA,cAExDI,EAAkBN,EAAYO,QAAQC,KAAI,SAACC,GAAD,OAAO,SAACrC,EAAD,CAAuBE,KAAMmC,EAAEnC,KAAMD,GAAIoC,EAAEpC,IAA1BoC,EAAEpC,OACpEqC,EAAmBV,EAAYW,SAASH,KAAI,SAACI,GAAD,OAAO,SAAC/B,EAAD,CAAoBE,QAAS6B,EAAE7B,QAASV,GAAIuC,EAAEvC,IAAhCuC,EAAEvC,OAMzE,OACI,iBAAKG,UAAWC,EAAAA,QAAhB,WACI,iBAAKD,UAAWC,EAAAA,aAAhB,cAAkC6B,EAAlC,QACA,iBAAK9B,UAAWC,EAAAA,SAAhB,WACI,yBAAMiC,KACN,SAACxB,EAAD,CAAqBG,SATJ,SAACwB,GAC1BX,EAAcW,EAAMC,6B,gIEjBtBC,EAAkB,SAAChB,GACrB,MAAO,CACHiB,OAAQjB,EAAMkB,KAAKD,SAIpB,SAASX,EAAoBa,GAOhC,OAAOpB,EAAAA,EAAAA,IAAQiB,EAARjB,EALmB,SAAChB,GACvB,IAAKkC,EAAwBlC,EAAxBkC,OAAWG,GAAhB,OAA6BrC,EAA7B,GACA,OAAKkC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUvC,GAAI","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__LzrPW\",\"dialogsItems\":\"Dialogs_dialogsItems__x-tpF\",\"active\":\"Dialogs_active__3DiGx\",\"messages\":\"Dialogs_messages__Ai05D\",\"message\":\"Dialogs_message__6S4S3\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\nexport const DialogItem: React.FC<DialogsType> = ({id, name}) => {\r\n    let path = '/dialogs/' + id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTCr-lKqKLOq1h6gltfpiurLTi6eX9Y0hkTiw&usqp=CAU\"\r\n                alt=\"ava\"/>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {MessagesType} from \"../../../redux/dialogsReducer\";\r\n\r\nexport const Message = (props: MessagesType) => {\r\n    return <div className={s.dialog}>\r\n        {props.message}\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/formsControls/FormControls\";\r\n\r\ntype DialogsPropsType = {\r\n    addNewMessage: (text: string) => void\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogsPage, addNewMessage}) => {\r\n\r\n    const dialogsElements = dialogsPage.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    const messagesElements = dialogsPage.messages.map((m) => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    const addNewMessageHandler = (value: FormDataType) => {\r\n        addNewMessage(value.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}> {dialogsElements} </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessageHandler}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AddMessageForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[requiredField, maxLength50]}>\r\n                </Field>\r\n            </div>\r\n            <button>Add message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport {addNewMessageAC, DialogsType, MessagesType} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: DialogsType[],\r\n    messages: MessagesType[],\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addNewMessage: (text: string) => void,\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addNewMessage: (text: string) => {\r\n            dispatch(addNewMessageAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["DialogItem","id","name","path","className","s","src","alt","to","Message","props","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","compose","connect","state","dialogsPage","dispatch","addNewMessage","text","addNewMessageAC","WithAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","value","newMessageBody","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}